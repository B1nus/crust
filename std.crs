bundle RESOLUTION
  number width
  number height

RESOLUTION get_resolution()
  ...

bundle MOUSE_POSITION
  number x
  number y

MOUSE_POSITION get_mouse_position()
  ...

bool is_key_pressed([number] key)
  if key == "a"
    ...
  else if key == "b"
    ...
  else
    assert(false)

number seconds_since_start()
  ...

bundle DATE
  number year
  number month
  number day

DATE get_current_date()
  ...

bundle TIME
  number hour
  number minute
  number second

TIME get_current_time()
  ...

[any] join_lists([[any]] lists)
  [any] out = []
  number list_index = 0
  loop list_length(lists)
    number item_index = 0
    [any] list = get_list_item(lists, list_index)
    loop list_length(list)
      add_to_list(out, clone(get_list_item(list, item_index)))
      item_index = item_index + 1
    list_index = list_index + 1
  return out

assert(bool condition)
  if not condition
    wasm("(call $proc_exit (i32.const 0))")

[number] format_number(number x, number base, number decimals)
  ...

print([number] text)
  [number] text = clone_list(text)
  add_to_list(text, '\n')
  wasi_import("fd_write")

number realloc(number pointer, number bytes)
  ...

number alloc(number bytes)
  return realloc(0, bytes)

free(number pointer)
  realloc(pointer, 0)

debug_number([number] identifier, [number] file_path, number line, number x)
  print(join_lists([file_path, ":", line, " ", identifier, " = ", format_number(x, 10, 5)]))
debug_bool([number] identifier, [number] file_path, number line, bool x)
  [number] text = ""
  if x
    text = "true"
  else
    text = "false"
  print(join_lists([file_path, ":", line, " ", identifier, " = ", text]))
debug_list(...
debug_map(...

// Formatting is baked into the syntax, no formatter necessary.
// Super easy generics and metaprogramming?
// choice? (enums)
// Every variable is a mutable reference. A.K.A. everything is a i32 pointing into linear memory. Yes this is inefficient. Cry about it.

clone_number(...
clone_bool(...
clone_list(...
clone_map(...
