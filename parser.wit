package wezy:parser;

interface tokenizer {
  enum numtype {
    i32,
    i64,
    f32,
    f64,
  }

  enum reftype {
    externref,
    funcref,
  }

  enum vectype {
    v128,
  }

  record token {
    %type: token-type,
    
  }

  variant token-type {
    import,
    export,
    func,
    memory,
    global,
    table,
    valtype,
    mut,
    newline,
    indentation,
    dedentation,
  }

  enum keyword {
    import,
    export,
    type,
    memory,
    data,
    global,
    table,
    elem,
    func,
    local,
  }

  variant statement {
    import(tuple<string,string,>),
  }

  resource tokenizer {
    constructor(source: list<u8>);
    keyword: func() -> keyword;
    parse-statement: func() -> statement;
  keyword: func() -> keyword;
  next-token: func(possible: option<list<token>>) -> token;
}
