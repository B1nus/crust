// Info:
// The compiler statically includes wasi and a "wez" module and local files you import.
// Export "_start" in order to make it runnable
// Strings are just read until the newline. no quotation marks

import name name as
  | func name type name
  | memory name (integer)?
  | global name (mut)? valtype
  | table name 

export name with
  | func name
  | memory name
  | global name
  | table name

type name (param valtype+)? (result valtype+)?

memory name integer integer?

data name integer? string

global name mut? valtype number

table name reftype integer integer?

elem name
  | name integer reftype name+
  | name integer reftype integer+
  | passive reftype name+
  | passive reftype integer+
  | declare reftype name+
  | declare reftype integer+

func name type name
  (local name+ type)*

  call_indirect name (param type+)? (result type+)?
  call name
  br_table name* name
  br_if name
  br name
  if (result valtype+)? else?
  block (result valtype+)?
  loop (result valtype+)?
  ref.null reftype
  ref.func name
  select (result valtype+)?

  local.get name
  local.set name
  local.tee name
  global.get name
  global.set name

  table.get name
  table.set name
  table.init name name
  table.drop name
  table.copy name name
  table.grow name
  table.size name
  table.fill name

  i32.load (align integer)? (offset integer)?
  i64.load (align integer)? (offset integer)?
  f32.load (align integer)? (offset integer)?
  f64.load (align integer)? (offset integer)?
  i32.load8_s (align integer)? (offset integer)?
  i32.load8_u (align integer)? (offset integer)?
  i32.load16_s (align integer)? (offset integer)?
  i32.load16_u (align integer)? (offset integer)?
  i64.load8_s (align integer)? (offset integer)?
  i64.load8_u (align integer)? (offset integer)?
  i64.load16_s (align integer)? (offset integer)?
  i64.load16_u (align integer)? (offset integer)?
  i64.load32_s (align integer)? (offset integer)?
  i64.load32_u (align integer)? (offset integer)?
  i32.store (align integer)? (offset integer)?
  i64.store (align integer)? (offset integer)?
  f32.store (align integer)? (offset integer)?
  f64.store (align integer)? (offset integer)?
  i32.store8 (align integer)? (offset integer)?
  i32.store16 (align integer)? (offset integer)?
  i64.store8 (align integer)? (offset integer)?
  i64.store16 (align integer)? (offset integer)?
  i64.store32 (align integer)? (offset integer)?

  memory.size name?
  memory.grow name?
  memory.init name name?
  data.drop name
  memory.copy name? name?
  memory.fill name?

  i32.const integer
  i64.const integer
  f32.const float
  f64.const float

  v128.load (align integer)? (offset integer)?
  v128.load8x8_s (align integer)? (offset integer)?
  v128.load8x8_u (align integer)? (offset integer)?
  v128.load16x4_s (align integer)? (offset integer)?
  v128.load16x4_u (align integer)? (offset integer)?
  v128.load32x2_s (align integer)? (offset integer)?
  v128.load32x2_u (align integer)? (offset integer)?
  v128.load8_splat (align integer)? (offset integer)?
  v128.load16_splat (align integer)? (offset integer)?
  v128.load32_splat (align integer)? (offset integer)?
  v128.load64_splat (align integer)? (offset integer)?
  v128.load32_zero (align integer)? (offset integer)?
  v128.load64_zero (align integer)? (offset integer)?
  v128.store (align integer)? (offset integer)?
  v128.load8_lane integer (align integer)? (offset integer)?
  v128.load16_lane integer (align integer)? (offset integer)?
  v128.load32_lane integer (align integer)? (offset integer)?
  v128.load64_lane integer (align integer)? (offset integer)?
  v128.store8_lane integer (align integer)? (offset integer)?
  v128.store16_lane integer (align integer)? (offset integer)?
  v128.store32_lane integer (align integer)? (offset integer)?
  v128.store64_lane integer (align integer)? (offset integer)?

  i8x16.extract_lane_s integer
  i8x16.extract_lane_u integer
  i8x16.replace_lane integer
  i16x8.extract_lane_s integer
  i16x8.extract_lane_u integer
  i16x8.replace_lane integer
  i32x4.extract_lane integer
  i32x4.replace_lane integer
  i64x2.extract_lane integer
  i64x2.replace_lane integer
  f32x4.extract_lane integer
  f32x4.replace_lane integer
  f64x2.extract_lane integer
  f64x2.replace_lane integer

  v128.const
    | i8x16 integer*16
    | i16x8 integer*8
    | i32x4 integer*4
    | i64x2 integer*2
    | f32x4 float*4
    | f64x2 float*2
  i8x16.shuffle integer*16
