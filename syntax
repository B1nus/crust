type 
  bool
  s8
  s16
  s32
  s64
  u8
  u16
  u32
  u64
  f32
  f64
  set type
  list type
  option type
  map type type
  result type type

record identifier
  identifier type
  identifier type
  identifier type
  ...

variant identifier
  identifier type?
  identifier type?
  identifier type?
  ...

flags identifier
  identifier
  identifier
  identifier
  ...

identifier
  identifier type
  identifier type
  identifier type
  ...
type
type
type
...
  statement
  statement
  statement
  ...

loop identifier?
  statement
  statement
  statement
  ...
  break? identifier?
  ...
  repeat? identifier?
  ...

if expression
  statement
  statement
  statement
  ...
else? if expression?
  statement
  statement
  statement
  ...

identifier type identifier type identifier type = expression

expression
  integer
  bytes
  float
  bool
  result expression
  option expression?
  call
  list
  map
  identifier . identifier?*
  ( expression )
  expression + expression
  expression - expression
  expression * expression
  expression / expression
  expression == expression
  expression != expression
  expression <= expression
  expression >= expression
  expression < expression
  expression > expression
  expression and expression
  expression or expression
  not expression

identifier . identifier?*
  expression
  expression
  expression
  ...

list
  item
  item
  item
  ...

map
  expression: expression
  expression: expression
  expression: expression
  ...

use
  path as identifier?
  path as identifier?
  path as identifier?
  ...

identifier
  [a-z] ([a-z_0-9]* [a-z0-9])?

hmmmm. only import functions? import everything including globals?

remove char because it's just a u32
remove string because it's just a list u8
remove tuple because it's just an unnamed record
remove type aliases because we can use a record
remove comments because maybe we can just make self documenting code
remove enum because it's just a variant
remove mut and & because everything is always a mutable reference

