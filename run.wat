(component $run
  (; (import "wasi:io/error@0.2.3" (instance ;)
  (;   (export "error" (type (sub resource))) ;)
  (; )) ;)
  (; (alias export 0 "error" (type)) ;)
  (; (import "wasi:io/streams@0.2.3" (instance ;)
  (;   (export $output-stream "output-stream" (type (sub resource))) ;)
  (;   (alias outer $run 1 (type $error)) ;)
  (;   (export "error" (type (eq $error))) ;)
  (;   (type (variant (case "last-operation-failed" (own 2)) (case "closed"))) ;)
  (;   (export "stream-error" (type (eq 4))) ;)
  (;   (export "[method]output-stream.blocking-write-and-flush" (func (param "self" (borrow $output-stream)) (param "contents" string) (result (result (error 4))))) ;)
  (; )) ;)
  (core module $run
    (func (export "run") (result i32)
      i32.const 1
    )
  )
  (core instance $run (instantiate $run))
  (type $run-t (func (result (result))))
  (func $run (type $run-t) (canon lift (core func $run "run")))
  (component $cli
    (import "run" (func $run (type $run-t)))
    (export "run" (func $run) (func (type $run-t)))
  )
  (instance (instantiate $cli (with "run" (func $run))))
  (export "wasi:cli/run@0.2.3" (instance 0))
)
