(component $run
  (type $error-inst (instance
    (export "error" (type (sub resource)))
  ))
  (import "wasi:io/error@0.2.3" (instance $error (type $error-inst)))
  (alias export $error "error" (type $error))
  (type $streams-t
    (instance
      (export $output-stream "output-stream" (type (sub resource)))
      (alias outer $run $error (type $error))
      (type $variant (variant (case "last-operation-failed" (own $error)) (case "closed")))
      (export $stream-error "stream-error" (type (eq $variant)))
      (type $self (borrow $output-stream))
      (export "[method]output-stream.blocking-write-and-flush" (func (param "self" $self) (param "contents" (list u8)) (result (result (error $stream-error)))))
    )
  )
  (import "wasi:io/streams@0.2.3" (instance $streams (type $streams-t)))
  (alias export $streams "output-stream" (type $output-stream))
  (type $stdout-t
    (instance
      (alias outer $run $output-stream (type $output-stream-t))
      (export $output-stream2 "output-stream" (type (eq $output-stream-t)))
      (export "get-stdout" (func (result (own $output-stream2))))
    )
  )
  (import "wasi:cli/stdout@0.2.3" (instance $stdout (type $stdout-t)))
  (core module $run
    (import "wasi" "write" (func $write (param i32 i32 i32 i32)))
    (import "wasi" "get-stdout" (func $get-stdout (result i32)))
    (func (export "run") (result i32)
      (call $get-stdout)
      (i32.const 0)
      (i32.const 8)
      (i32.const 0)
      (call $write)
      (i32.const 0)
    )
  )
  (core module $deps
    (memory (export "memory") 1) 
    (data (i32.const 0) "hi\n")
    (func (export "realloc") (param i32 i32 i32 i32) (result i32)
      (i32.const 1)
      (memory.grow)
      (drop)
      (memory.size)
      (i32.const 65536)
      (i32.mul)
    )
  )
  (core instance $deps (instantiate $deps))
  (core func $write (canon lower (func $streams "[method]output-stream.blocking-write-and-flush") (memory $deps "memory") (realloc (func $deps "realloc"))))
  (core func $get-stdout (canon lower (func $stdout "get-stdout")))
  (core instance $run (instantiate $run (with "wasi" (instance
    (export "write" (func $write))
    (export "get-stdout" (func $get-stdout))
  ))))
  (type $run-t (func (result (result))))
  (func $run (type $run-t) (canon lift (core func $run "run")))
  (component $cli
    (import "run" (func $run (type $run-t)))
    (export "run" (func $run) (func (type $run-t)))
  )
  (instance $cli (instantiate $cli (with "run" (func $run))))
  (export "wasi:cli/run@0.2.3" (instance $cli))
)
