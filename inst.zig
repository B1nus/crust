pub fn instToBytes(inst: Inst) []const u8 {
    return switch (inst) {
        .@"unreachable" => &.{ 0x0 },
        .@"nop" => &.{ 0x1 },
        .@"block" => &.{ 0x2 },
        .@"loop" => &.{ 0x3 },
        .@"if" => &.{ 0x4 },
        .@"else" => &.{ 0x5 },
        .@"try" => &.{ 0x6 },
        .@"catch" => &.{ 0x7 },
        .@"throw" => &.{ 0x8 },
        .@"rethrow" => &.{ 0x9 },
        .@"throw_ref" => &.{ 0xa },
        .@"end" => &.{ 0xb },
        .@"br" => &.{ 0xc },
        .@"br_if" => &.{ 0xd },
        .@"br_table" => &.{ 0xe },
        .@"return" => &.{ 0xf },
        .@"call" => &.{ 0x10 },
        .@"call_indirect" => &.{ 0x11 },
        .@"return_call" => &.{ 0x12 },
        .@"return_call_indirect" => &.{ 0x13 },
        .@"call_ref" => &.{ 0x14 },
        .@"delegate" => &.{ 0x18 },
        .@"catch_all" => &.{ 0x19 },
        .@"drop" => &.{ 0x1a },
        .@"select" => &.{ 0x1c },
        .@"try_table" => &.{ 0x1f },
        .@"local.get" => &.{ 0x20 },
        .@"local.set" => &.{ 0x21 },
        .@"local.tee" => &.{ 0x22 },
        .@"global.get" => &.{ 0x23 },
        .@"global.set" => &.{ 0x24 },
        .@"i32.load" => &.{ 0x28 },
        .@"i64.load" => &.{ 0x29 },
        .@"f32.load" => &.{ 0x2a },
        .@"f64.load" => &.{ 0x2b },
        .@"i32.load8_s" => &.{ 0x2c },
        .@"i32.load8_u" => &.{ 0x2d },
        .@"i32.load16_s" => &.{ 0x2e },
        .@"i32.load16_u" => &.{ 0x2f },
        .@"i64.load8_s" => &.{ 0x30 },
        .@"i64.load8_u" => &.{ 0x31 },
        .@"i64.load16_s" => &.{ 0x32 },
        .@"i64.load16_u" => &.{ 0x33 },
        .@"i64.load32_s" => &.{ 0x34 },
        .@"i64.load32_u" => &.{ 0x35 },
        .@"i32.store" => &.{ 0x36 },
        .@"i64.store" => &.{ 0x37 },
        .@"f32.store" => &.{ 0x38 },
        .@"f64.store" => &.{ 0x39 },
        .@"i32.store8" => &.{ 0x3a },
        .@"i32.store16" => &.{ 0x3b },
        .@"i64.store8" => &.{ 0x3c },
        .@"i64.store16" => &.{ 0x3d },
        .@"i64.store32" => &.{ 0x3e },
        .@"memory.size" => &.{ 0x3f },
        .@"memory.grow" => &.{ 0x40 },
        .@"i32.const" => &.{ 0x41 },
        .@"i64.const" => &.{ 0x42 },
        .@"f32.const" => &.{ 0x43 },
        .@"f64.const" => &.{ 0x44 },
        .@"i32.eqz" => &.{ 0x45 },
        .@"i32.eq" => &.{ 0x46 },
        .@"i32.ne" => &.{ 0x47 },
        .@"i32.lt_s" => &.{ 0x48 },
        .@"i32.lt_u" => &.{ 0x49 },
        .@"i32.gt_s" => &.{ 0x4a },
        .@"i32.gt_u" => &.{ 0x4b },
        .@"i32.le_s" => &.{ 0x4c },
        .@"i32.le_u" => &.{ 0x4d },
        .@"i32.ge_s" => &.{ 0x4e },
        .@"i32.ge_u" => &.{ 0x4f },
        .@"i64.eqz" => &.{ 0x50 },
        .@"i64.eq" => &.{ 0x51 },
        .@"i64.ne" => &.{ 0x52 },
        .@"i64.lt_s" => &.{ 0x53 },
        .@"i64.lt_u" => &.{ 0x54 },
        .@"i64.gt_s" => &.{ 0x55 },
        .@"i64.gt_u" => &.{ 0x56 },
        .@"i64.le_s" => &.{ 0x57 },
        .@"i64.le_u" => &.{ 0x58 },
        .@"i64.ge_s" => &.{ 0x59 },
        .@"i64.ge_u" => &.{ 0x5a },
        .@"f32.eq" => &.{ 0x5b },
        .@"f32.ne" => &.{ 0x5c },
        .@"f32.lt" => &.{ 0x5d },
        .@"f32.gt" => &.{ 0x5e },
        .@"f32.le" => &.{ 0x5f },
        .@"f32.ge" => &.{ 0x60 },
        .@"f64.eq" => &.{ 0x61 },
        .@"f64.ne" => &.{ 0x62 },
        .@"f64.lt" => &.{ 0x63 },
        .@"f64.gt" => &.{ 0x64 },
        .@"f64.le" => &.{ 0x65 },
        .@"f64.ge" => &.{ 0x66 },
        .@"i32.clz" => &.{ 0x67 },
        .@"i32.ctz" => &.{ 0x68 },
        .@"i32.popcnt" => &.{ 0x69 },
        .@"i32.add" => &.{ 0x6a },
        .@"i32.sub" => &.{ 0x6b },
        .@"i32.mul" => &.{ 0x6c },
        .@"i32.div_s" => &.{ 0x6d },
        .@"i32.div_u" => &.{ 0x6e },
        .@"i32.rem_s" => &.{ 0x6f },
        .@"i32.rem_u" => &.{ 0x70 },
        .@"i32.and" => &.{ 0x71 },
        .@"i32.or" => &.{ 0x72 },
        .@"i32.xor" => &.{ 0x73 },
        .@"i32.shl" => &.{ 0x74 },
        .@"i32.shr_s" => &.{ 0x75 },
        .@"i32.shr_u" => &.{ 0x76 },
        .@"i32.rotl" => &.{ 0x77 },
        .@"i32.rotr" => &.{ 0x78 },
        .@"i64.clz" => &.{ 0x79 },
        .@"i64.ctz" => &.{ 0x7a },
        .@"i64.popcnt" => &.{ 0x7b },
        .@"i64.add" => &.{ 0x7c },
        .@"i64.sub" => &.{ 0x7d },
        .@"i64.mul" => &.{ 0x7e },
        .@"i64.div_s" => &.{ 0x7f },
        .@"i64.div_u" => &.{ 0x80 },
        .@"i64.rem_s" => &.{ 0x81 },
        .@"i64.rem_u" => &.{ 0x82 },
        .@"i64.and" => &.{ 0x83 },
        .@"i64.or" => &.{ 0x84 },
        .@"i64.xor" => &.{ 0x85 },
        .@"i64.shl" => &.{ 0x86 },
        .@"i64.shr_s" => &.{ 0x87 },
        .@"i64.shr_u" => &.{ 0x88 },
        .@"i64.rotl" => &.{ 0x89 },
        .@"i64.rotr" => &.{ 0x8a },
        .@"f32.abs" => &.{ 0x8b },
        .@"f32.neg" => &.{ 0x8c },
        .@"f32.ceil" => &.{ 0x8d },
        .@"f32.floor" => &.{ 0x8e },
        .@"f32.trunc" => &.{ 0x8f },
        .@"f32.nearest" => &.{ 0x90 },
        .@"f32.sqrt" => &.{ 0x91 },
        .@"f32.add" => &.{ 0x92 },
        .@"f32.sub" => &.{ 0x93 },
        .@"f32.mul" => &.{ 0x94 },
        .@"f32.div" => &.{ 0x95 },
        .@"f32.min" => &.{ 0x96 },
        .@"f32.max" => &.{ 0x97 },
        .@"f32.copysign" => &.{ 0x98 },
        .@"f64.abs" => &.{ 0x99 },
        .@"f64.neg" => &.{ 0x9a },
        .@"f64.ceil" => &.{ 0x9b },
        .@"f64.floor" => &.{ 0x9c },
        .@"f64.trunc" => &.{ 0x9d },
        .@"f64.nearest" => &.{ 0x9e },
        .@"f64.sqrt" => &.{ 0x9f },
        .@"f64.add" => &.{ 0xa0 },
        .@"f64.sub" => &.{ 0xa1 },
        .@"f64.mul" => &.{ 0xa2 },
        .@"f64.div" => &.{ 0xa3 },
        .@"f64.min" => &.{ 0xa4 },
        .@"f64.max" => &.{ 0xa5 },
        .@"f64.copysign" => &.{ 0xa6 },
        .@"i32.wrap_i64" => &.{ 0xa7 },
        .@"i32.trunc_f32_s" => &.{ 0xa8 },
        .@"i32.trunc_f32_u" => &.{ 0xa9 },
        .@"i32.trunc_f64_s" => &.{ 0xaa },
        .@"i32.trunc_f64_u" => &.{ 0xab },
        .@"i64.extend_i32_s" => &.{ 0xac },
        .@"i64.extend_i32_u" => &.{ 0xad },
        .@"i64.trunc_f32_s" => &.{ 0xae },
        .@"i64.trunc_f32_u" => &.{ 0xaf },
        .@"i64.trunc_f64_s" => &.{ 0xb0 },
        .@"i64.trunc_f64_u" => &.{ 0xb1 },
        .@"f32.convert_i32_s" => &.{ 0xb2 },
        .@"f32.convert_i32_u" => &.{ 0xb3 },
        .@"f32.convert_i64_s" => &.{ 0xb4 },
        .@"f32.convert_i64_u" => &.{ 0xb5 },
        .@"f32.demote_f64" => &.{ 0xb6 },
        .@"f64.convert_i32_s" => &.{ 0xb7 },
        .@"f64.convert_i32_u" => &.{ 0xb8 },
        .@"f64.convert_i64_s" => &.{ 0xb9 },
        .@"f64.convert_i64_u" => &.{ 0xba },
        .@"f64.promote_f32" => &.{ 0xbb },
        .@"i32.reinterpret_f32" => &.{ 0xbc },
        .@"i64.reinterpret_f64" => &.{ 0xbd },
        .@"f32.reinterpret_i32" => &.{ 0xbe },
        .@"f64.reinterpret_i64" => &.{ 0xbf },
        .@"i32.extend8_s" => &.{ 0xc0 },
        .@"i32.extend16_s" => &.{ 0xc1 },
        .@"i64.extend8_s" => &.{ 0xc2 },
        .@"i64.extend16_s" => &.{ 0xc3 },
        .@"i64.extend32_s" => &.{ 0xc4 },
        .@"alloca" => &.{ 0xe0 },
        .@"br_unless" => &.{ 0xe1 },
        .@"call_import" => &.{ 0xe2 },
        .@"data" => &.{ 0xe3 },
        .@"drop_keep" => &.{ 0xe4 },
        .@"catch_drop" => &.{ 0xe5 },
        .@"adjust_frame_for_return_call" => &.{ 0xe6 },
        .@"global.get.ref" => &.{ 0xe7 },
        .@"local.get.ref" => &.{ 0xe9 },
        .@"mark_ref" => &.{ 0xea },
        .@"i32.trunc_sat_f32_s" => &.{ 0xfc,  },
        .@"i32.trunc_sat_f32_u" => &.{ 0xfc, 0x1 },
        .@"i32.trunc_sat_f64_s" => &.{ 0xfc, 0x2 },
        .@"i32.trunc_sat_f64_u" => &.{ 0xfc, 0x3 },
        .@"i64.trunc_sat_f32_s" => &.{ 0xfc, 0x4 },
        .@"i64.trunc_sat_f32_u" => &.{ 0xfc, 0x5 },
        .@"i64.trunc_sat_f64_s" => &.{ 0xfc, 0x6 },
        .@"i64.trunc_sat_f64_u" => &.{ 0xfc, 0x7 },
        .@"memory.init" => &.{ 0xfc, 0x8 },
        .@"data.drop" => &.{ 0xfc, 0x9 },
        .@"memory.copy" => &.{ 0xfc, 0xa },
        .@"memory.fill" => &.{ 0xfc, 0xb },
        .@"table.init" => &.{ 0xfc, 0xc },
        .@"elem.drop" => &.{ 0xfc, 0xd },
        .@"table.copy" => &.{ 0xfc, 0xe },
        .@"table.get" => &.{ 0x25 },
        .@"table.set" => &.{ 0x26 },
        .@"table.grow" => &.{ 0xfc, 0xf },
        .@"table.size" => &.{ 0xfc, 0x10 },
        .@"table.fill" => &.{ 0xfc, 0x11 },
        .@"ref.null" => &.{ 0xd0 },
        .@"ref.is_null" => &.{ 0xd1 },
        .@"ref.func" => &.{ 0xd2 },
        .@"v128.load" => &.{ 0xfd,  },
        .@"v128.load8x8_s" => &.{ 0xfd, 0x1 },
        .@"v128.load8x8_u" => &.{ 0xfd, 0x2 },
        .@"v128.load16x4_s" => &.{ 0xfd, 0x3 },
        .@"v128.load16x4_u" => &.{ 0xfd, 0x4 },
        .@"v128.load32x2_s" => &.{ 0xfd, 0x5 },
        .@"v128.load32x2_u" => &.{ 0xfd, 0x6 },
        .@"v128.load8_splat" => &.{ 0xfd, 0x7 },
        .@"v128.load16_splat" => &.{ 0xfd, 0x8 },
        .@"v128.load32_splat" => &.{ 0xfd, 0x9 },
        .@"v128.load64_splat" => &.{ 0xfd, 0xa },
        .@"v128.store" => &.{ 0xfd, 0xb },
        .@"v128.const" => &.{ 0xfd, 0xc },
        .@"i8x16.shuffle" => &.{ 0xfd, 0xd },
        .@"i8x16.swizzle" => &.{ 0xfd, 0xe },
        .@"i8x16.splat" => &.{ 0xfd, 0xf },
        .@"i16x8.splat" => &.{ 0xfd, 0x10 },
        .@"i32x4.splat" => &.{ 0xfd, 0x11 },
        .@"i64x2.splat" => &.{ 0xfd, 0x12 },
        .@"f32x4.splat" => &.{ 0xfd, 0x13 },
        .@"f64x2.splat" => &.{ 0xfd, 0x14 },
        .@"i8x16.extract_lane_s" => &.{ 0xfd, 0x15 },
        .@"i8x16.extract_lane_u" => &.{ 0xfd, 0x16 },
        .@"i8x16.replace_lane" => &.{ 0xfd, 0x17 },
        .@"i16x8.extract_lane_s" => &.{ 0xfd, 0x18 },
        .@"i16x8.extract_lane_u" => &.{ 0xfd, 0x19 },
        .@"i16x8.replace_lane" => &.{ 0xfd, 0x1a },
        .@"i32x4.extract_lane" => &.{ 0xfd, 0x1b },
        .@"i32x4.replace_lane" => &.{ 0xfd, 0x1c },
        .@"i64x2.extract_lane" => &.{ 0xfd, 0x1d },
        .@"i64x2.replace_lane" => &.{ 0xfd, 0x1e },
        .@"f32x4.extract_lane" => &.{ 0xfd, 0x1f },
        .@"f32x4.replace_lane" => &.{ 0xfd, 0x20 },
        .@"f64x2.extract_lane" => &.{ 0xfd, 0x21 },
        .@"f64x2.replace_lane" => &.{ 0xfd, 0x22 },
        .@"i8x16.eq" => &.{ 0xfd, 0x23 },
        .@"i8x16.ne" => &.{ 0xfd, 0x24 },
        .@"i8x16.lt_s" => &.{ 0xfd, 0x25 },
        .@"i8x16.lt_u" => &.{ 0xfd, 0x26 },
        .@"i8x16.gt_s" => &.{ 0xfd, 0x27 },
        .@"i8x16.gt_u" => &.{ 0xfd, 0x28 },
        .@"i8x16.le_s" => &.{ 0xfd, 0x29 },
        .@"i8x16.le_u" => &.{ 0xfd, 0x2a },
        .@"i8x16.ge_s" => &.{ 0xfd, 0x2b },
        .@"i8x16.ge_u" => &.{ 0xfd, 0x2c },
        .@"i16x8.eq" => &.{ 0xfd, 0x2d },
        .@"i16x8.ne" => &.{ 0xfd, 0x2e },
        .@"i16x8.lt_s" => &.{ 0xfd, 0x2f },
        .@"i16x8.lt_u" => &.{ 0xfd, 0x30 },
        .@"i16x8.gt_s" => &.{ 0xfd, 0x31 },
        .@"i16x8.gt_u" => &.{ 0xfd, 0x32 },
        .@"i16x8.le_s" => &.{ 0xfd, 0x33 },
        .@"i16x8.le_u" => &.{ 0xfd, 0x34 },
        .@"i16x8.ge_s" => &.{ 0xfd, 0x35 },
        .@"i16x8.ge_u" => &.{ 0xfd, 0x36 },
        .@"i32x4.eq" => &.{ 0xfd, 0x37 },
        .@"i32x4.ne" => &.{ 0xfd, 0x38 },
        .@"i32x4.lt_s" => &.{ 0xfd, 0x39 },
        .@"i32x4.lt_u" => &.{ 0xfd, 0x3a },
        .@"i32x4.gt_s" => &.{ 0xfd, 0x3b },
        .@"i32x4.gt_u" => &.{ 0xfd, 0x3c },
        .@"i32x4.le_s" => &.{ 0xfd, 0x3d },
        .@"i32x4.le_u" => &.{ 0xfd, 0x3e },
        .@"i32x4.ge_s" => &.{ 0xfd, 0x3f },
        .@"i32x4.ge_u" => &.{ 0xfd, 0x40 },
        .@"f32x4.eq" => &.{ 0xfd, 0x41 },
        .@"f32x4.ne" => &.{ 0xfd, 0x42 },
        .@"f32x4.lt" => &.{ 0xfd, 0x43 },
        .@"f32x4.gt" => &.{ 0xfd, 0x44 },
        .@"f32x4.le" => &.{ 0xfd, 0x45 },
        .@"f32x4.ge" => &.{ 0xfd, 0x46 },
        .@"f64x2.eq" => &.{ 0xfd, 0x47 },
        .@"f64x2.ne" => &.{ 0xfd, 0x48 },
        .@"f64x2.lt" => &.{ 0xfd, 0x49 },
        .@"f64x2.gt" => &.{ 0xfd, 0x4a },
        .@"f64x2.le" => &.{ 0xfd, 0x4b },
        .@"f64x2.ge" => &.{ 0xfd, 0x4c },
        .@"v128.not" => &.{ 0xfd, 0x4d },
        .@"v128.and" => &.{ 0xfd, 0x4e },
        .@"v128.andnot" => &.{ 0xfd, 0x4f },
        .@"v128.or" => &.{ 0xfd, 0x50 },
        .@"v128.xor" => &.{ 0xfd, 0x51 },
        .@"v128.bitselect" => &.{ 0xfd, 0x52 },
        .@"v128.any_true" => &.{ 0xfd, 0x53 },
        .@"v128.load8_lane" => &.{ 0xfd, 0x54 },
        .@"v128.load16_lane" => &.{ 0xfd, 0x55 },
        .@"v128.load32_lane" => &.{ 0xfd, 0x56 },
        .@"v128.load64_lane" => &.{ 0xfd, 0x57 },
        .@"v128.store8_lane" => &.{ 0xfd, 0x58 },
        .@"v128.store16_lane" => &.{ 0xfd, 0x59 },
        .@"v128.store32_lane" => &.{ 0xfd, 0x5a },
        .@"v128.store64_lane" => &.{ 0xfd, 0x5b },
        .@"v128.load32_zero" => &.{ 0xfd, 0x5c },
        .@"v128.load64_zero" => &.{ 0xfd, 0x5d },
        .@"f32x4.demote_f64x2_zero" => &.{ 0xfd, 0x5e },
        .@"f64x2.promote_low_f32x4" => &.{ 0xfd, 0x5f },
        .@"i8x16.abs" => &.{ 0xfd, 0x60 },
        .@"i8x16.neg" => &.{ 0xfd, 0x61 },
        .@"i8x16.popcnt" => &.{ 0xfd, 0x62 },
        .@"i8x16.all_true" => &.{ 0xfd, 0x63 },
        .@"i8x16.bitmask" => &.{ 0xfd, 0x64 },
        .@"i8x16.narrow_i16x8_s" => &.{ 0xfd, 0x65 },
        .@"i8x16.narrow_i16x8_u" => &.{ 0xfd, 0x66 },
        .@"i8x16.shl" => &.{ 0xfd, 0x6b },
        .@"i8x16.shr_s" => &.{ 0xfd, 0x6c },
        .@"i8x16.shr_u" => &.{ 0xfd, 0x6d },
        .@"i8x16.add" => &.{ 0xfd, 0x6e },
        .@"i8x16.add_sat_s" => &.{ 0xfd, 0x6f },
        .@"i8x16.add_sat_u" => &.{ 0xfd, 0x70 },
        .@"i8x16.sub" => &.{ 0xfd, 0x71 },
        .@"i8x16.sub_sat_s" => &.{ 0xfd, 0x72 },
        .@"i8x16.sub_sat_u" => &.{ 0xfd, 0x73 },
        .@"i8x16.min_s" => &.{ 0xfd, 0x76 },
        .@"i8x16.min_u" => &.{ 0xfd, 0x77 },
        .@"i8x16.max_s" => &.{ 0xfd, 0x78 },
        .@"i8x16.max_u" => &.{ 0xfd, 0x79 },
        .@"i8x16.avgr_u" => &.{ 0xfd, 0x7b },
        .@"i16x8.extadd_pairwise_i8x16_s" => &.{ 0xfd, 0x7c },
        .@"i16x8.extadd_pairwise_i8x16_u" => &.{ 0xfd, 0x7d },
        .@"i32x4.extadd_pairwise_i16x8_s" => &.{ 0xfd, 0x7e },
        .@"i32x4.extadd_pairwise_i16x8_u" => &.{ 0xfd, 0x7f },
        .@"i16x8.abs" => &.{ 0xfd, 0x80, 0x1 },
        .@"i16x8.neg" => &.{ 0xfd, 0x81, 0x1 },
        .@"i16x8.q15mulr_sat_s" => &.{ 0xfd, 0x82, 0x1 },
        .@"i16x8.all_true" => &.{ 0xfd, 0x83, 0x1 },
        .@"i16x8.bitmask" => &.{ 0xfd, 0x84, 0x1 },
        .@"i16x8.narrow_i32x4_s" => &.{ 0xfd, 0x85, 0x1 },
        .@"i16x8.narrow_i32x4_u" => &.{ 0xfd, 0x86, 0x1 },
        .@"i16x8.extend_low_i8x16_s" => &.{ 0xfd, 0x87, 0x1 },
        .@"i16x8.extend_high_i8x16_s" => &.{ 0xfd, 0x88, 0x1 },
        .@"i16x8.extend_low_i8x16_u" => &.{ 0xfd, 0x89, 0x1 },
        .@"i16x8.extend_high_i8x16_u" => &.{ 0xfd, 0x8a, 0x1 },
        .@"i16x8.shl" => &.{ 0xfd, 0x8b, 0x1 },
        .@"i16x8.shr_s" => &.{ 0xfd, 0x8c, 0x1 },
        .@"i16x8.shr_u" => &.{ 0xfd, 0x8d, 0x1 },
        .@"i16x8.add" => &.{ 0xfd, 0x8e, 0x1 },
        .@"i16x8.add_sat_s" => &.{ 0xfd, 0x8f, 0x1 },
        .@"i16x8.add_sat_u" => &.{ 0xfd, 0x90, 0x1 },
        .@"i16x8.sub" => &.{ 0xfd, 0x91, 0x1 },
        .@"i16x8.sub_sat_s" => &.{ 0xfd, 0x92, 0x1 },
        .@"i16x8.sub_sat_u" => &.{ 0xfd, 0x93, 0x1 },
        .@"i16x8.mul" => &.{ 0xfd, 0x95, 0x1 },
        .@"i16x8.min_s" => &.{ 0xfd, 0x96, 0x1 },
        .@"i16x8.min_u" => &.{ 0xfd, 0x97, 0x1 },
        .@"i16x8.max_s" => &.{ 0xfd, 0x98, 0x1 },
        .@"i16x8.max_u" => &.{ 0xfd, 0x99, 0x1 },
        .@"i16x8.avgr_u" => &.{ 0xfd, 0x9b, 0x1 },
        .@"i16x8.extmul_low_i8x16_s" => &.{ 0xfd, 0x9c, 0x1 },
        .@"i16x8.extmul_high_i8x16_s" => &.{ 0xfd, 0x9d, 0x1 },
        .@"i16x8.extmul_low_i8x16_u" => &.{ 0xfd, 0x9e, 0x1 },
        .@"i16x8.extmul_high_i8x16_u" => &.{ 0xfd, 0x9f, 0x1 },
        .@"i32x4.abs" => &.{ 0xfd, 0xa0, 0x1 },
        .@"i32x4.neg" => &.{ 0xfd, 0xa1, 0x1 },
        .@"i32x4.all_true" => &.{ 0xfd, 0xa3, 0x1 },
        .@"i32x4.bitmask" => &.{ 0xfd, 0xa4, 0x1 },
        .@"i32x4.extend_low_i16x8_s" => &.{ 0xfd, 0xa7, 0x1 },
        .@"i32x4.extend_high_i16x8_s" => &.{ 0xfd, 0xa8, 0x1 },
        .@"i32x4.extend_low_i16x8_u" => &.{ 0xfd, 0xa9, 0x1 },
        .@"i32x4.extend_high_i16x8_u" => &.{ 0xfd, 0xaa, 0x1 },
        .@"i32x4.shl" => &.{ 0xfd, 0xab, 0x1 },
        .@"i32x4.shr_s" => &.{ 0xfd, 0xac, 0x1 },
        .@"i32x4.shr_u" => &.{ 0xfd, 0xad, 0x1 },
        .@"i32x4.add" => &.{ 0xfd, 0xae, 0x1 },
        .@"i32x4.sub" => &.{ 0xfd, 0xb1, 0x1 },
        .@"i32x4.mul" => &.{ 0xfd, 0xb5, 0x1 },
        .@"i32x4.min_s" => &.{ 0xfd, 0xb6, 0x1 },
        .@"i32x4.min_u" => &.{ 0xfd, 0xb7, 0x1 },
        .@"i32x4.max_s" => &.{ 0xfd, 0xb8, 0x1 },
        .@"i32x4.max_u" => &.{ 0xfd, 0xb9, 0x1 },
        .@"i32x4.dot_i16x8_s" => &.{ 0xfd, 0xba, 0x1 },
        .@"i32x4.extmul_low_i16x8_s" => &.{ 0xfd, 0xbc, 0x1 },
        .@"i32x4.extmul_high_i16x8_s" => &.{ 0xfd, 0xbd, 0x1 },
        .@"i32x4.extmul_low_i16x8_u" => &.{ 0xfd, 0xbe, 0x1 },
        .@"i32x4.extmul_high_i16x8_u" => &.{ 0xfd, 0xbf, 0x1 },
        .@"i64x2.abs" => &.{ 0xfd, 0xc0, 0x1 },
        .@"i64x2.neg" => &.{ 0xfd, 0xc1, 0x1 },
        .@"i64x2.all_true" => &.{ 0xfd, 0xc3, 0x1 },
        .@"i64x2.bitmask" => &.{ 0xfd, 0xc4, 0x1 },
        .@"i64x2.extend_low_i32x4_s" => &.{ 0xfd, 0xc7, 0x1 },
        .@"i64x2.extend_high_i32x4_s" => &.{ 0xfd, 0xc8, 0x1 },
        .@"i64x2.extend_low_i32x4_u" => &.{ 0xfd, 0xc9, 0x1 },
        .@"i64x2.extend_high_i32x4_u" => &.{ 0xfd, 0xca, 0x1 },
        .@"i64x2.shl" => &.{ 0xfd, 0xcb, 0x1 },
        .@"i64x2.shr_s" => &.{ 0xfd, 0xcc, 0x1 },
        .@"i64x2.shr_u" => &.{ 0xfd, 0xcd, 0x1 },
        .@"i64x2.add" => &.{ 0xfd, 0xce, 0x1 },
        .@"i64x2.sub" => &.{ 0xfd, 0xd1, 0x1 },
        .@"i64x2.mul" => &.{ 0xfd, 0xd5, 0x1 },
        .@"i64x2.eq" => &.{ 0xfd, 0xd6, 0x1 },
        .@"i64x2.ne" => &.{ 0xfd, 0xd7, 0x1 },
        .@"i64x2.lt_s" => &.{ 0xfd, 0xd8, 0x1 },
        .@"i64x2.gt_s" => &.{ 0xfd, 0xd9, 0x1 },
        .@"i64x2.le_s" => &.{ 0xfd, 0xda, 0x1 },
        .@"i64x2.ge_s" => &.{ 0xfd, 0xdb, 0x1 },
        .@"i64x2.extmul_low_i32x4_s" => &.{ 0xfd, 0xdc, 0x1 },
        .@"i64x2.extmul_high_i32x4_s" => &.{ 0xfd, 0xdd, 0x1 },
        .@"i64x2.extmul_low_i32x4_u" => &.{ 0xfd, 0xde, 0x1 },
        .@"i64x2.extmul_high_i32x4_u" => &.{ 0xfd, 0xdf, 0x1 },
        .@"f32x4.ceil" => &.{ 0xfd, 0x67 },
        .@"f32x4.floor" => &.{ 0xfd, 0x68 },
        .@"f32x4.trunc" => &.{ 0xfd, 0x69 },
        .@"f32x4.nearest" => &.{ 0xfd, 0x6a },
        .@"f64x2.ceil" => &.{ 0xfd, 0x74 },
        .@"f64x2.floor" => &.{ 0xfd, 0x75 },
        .@"f64x2.trunc" => &.{ 0xfd, 0x7a },
        .@"f64x2.nearest" => &.{ 0xfd, 0x94, 0x1 },
        .@"f32x4.abs" => &.{ 0xfd, 0xe0, 0x1 },
        .@"f32x4.neg" => &.{ 0xfd, 0xe1, 0x1 },
        .@"f32x4.sqrt" => &.{ 0xfd, 0xe3, 0x1 },
        .@"f32x4.add" => &.{ 0xfd, 0xe4, 0x1 },
        .@"f32x4.sub" => &.{ 0xfd, 0xe5, 0x1 },
        .@"f32x4.mul" => &.{ 0xfd, 0xe6, 0x1 },
        .@"f32x4.div" => &.{ 0xfd, 0xe7, 0x1 },
        .@"f32x4.min" => &.{ 0xfd, 0xe8, 0x1 },
        .@"f32x4.max" => &.{ 0xfd, 0xe9, 0x1 },
        .@"f32x4.pmin" => &.{ 0xfd, 0xea, 0x1 },
        .@"f32x4.pmax" => &.{ 0xfd, 0xeb, 0x1 },
        .@"f64x2.abs" => &.{ 0xfd, 0xec, 0x1 },
        .@"f64x2.neg" => &.{ 0xfd, 0xed, 0x1 },
        .@"f64x2.sqrt" => &.{ 0xfd, 0xef, 0x1 },
        .@"f64x2.add" => &.{ 0xfd, 0xf0, 0x1 },
        .@"f64x2.sub" => &.{ 0xfd, 0xf1, 0x1 },
        .@"f64x2.mul" => &.{ 0xfd, 0xf2, 0x1 },
        .@"f64x2.div" => &.{ 0xfd, 0xf3, 0x1 },
        .@"f64x2.min" => &.{ 0xfd, 0xf4, 0x1 },
        .@"f64x2.max" => &.{ 0xfd, 0xf5, 0x1 },
        .@"f64x2.pmin" => &.{ 0xfd, 0xf6, 0x1 },
        .@"f64x2.pmax" => &.{ 0xfd, 0xf7, 0x1 },
        .@"i32x4.trunc_sat_f32x4_s" => &.{ 0xfd, 0xf8, 0x1 },
        .@"i32x4.trunc_sat_f32x4_u" => &.{ 0xfd, 0xf9, 0x1 },
        .@"f32x4.convert_i32x4_s" => &.{ 0xfd, 0xfa, 0x1 },
        .@"f32x4.convert_i32x4_u" => &.{ 0xfd, 0xfb, 0x1 },
        .@"i32x4.trunc_sat_f64x2_s_zero" => &.{ 0xfd, 0xfc, 0x1 },
        .@"i32x4.trunc_sat_f64x2_u_zero" => &.{ 0xfd, 0xfd, 0x1 },
        .@"f64x2.convert_low_i32x4_s" => &.{ 0xfd, 0xfe, 0x1 },
        .@"f64x2.convert_low_i32x4_u" => &.{ 0xfd, 0xff, 0x1 },
        .@"i8x16.relaxed_swizzle" => &.{ 0xfd, 0x80, 0x2 },
        .@"i32x4.relaxed_trunc_f32x4_s" => &.{ 0xfd, 0x81, 0x2 },
        .@"i32x4.relaxed_trunc_f32x4_u" => &.{ 0xfd, 0x82, 0x2 },
        .@"i32x4.relaxed_trunc_f64x2_s_zero" => &.{ 0xfd, 0x83, 0x2 },
        .@"i32x4.relaxed_trunc_f64x2_u_zero" => &.{ 0xfd, 0x84, 0x2 },
        .@"f32x4.relaxed_madd" => &.{ 0xfd, 0x85, 0x2 },
        .@"f32x4.relaxed_nmadd" => &.{ 0xfd, 0x86, 0x2 },
        .@"f64x2.relaxed_madd" => &.{ 0xfd, 0x87, 0x2 },
        .@"f64x2.relaxed_nmadd" => &.{ 0xfd, 0x88, 0x2 },
        .@"i8x16.relaxed_laneselect" => &.{ 0xfd, 0x89, 0x2 },
        .@"i16x8.relaxed_laneselect" => &.{ 0xfd, 0x8a, 0x2 },
        .@"i32x4.relaxed_laneselect" => &.{ 0xfd, 0x8b, 0x2 },
        .@"i64x2.relaxed_laneselect" => &.{ 0xfd, 0x8c, 0x2 },
        .@"f32x4.relaxed_min" => &.{ 0xfd, 0x8d, 0x2 },
        .@"f32x4.relaxed_max" => &.{ 0xfd, 0x8e, 0x2 },
        .@"f64x2.relaxed_min" => &.{ 0xfd, 0x8f, 0x2 },
        .@"f64x2.relaxed_max" => &.{ 0xfd, 0x90, 0x2 },
        .@"i16x8.relaxed_q15mulr_s" => &.{ 0xfd, 0x91, 0x2 },
        .@"i16x8.relaxed_dot_i8x16_i7x16_s" => &.{ 0xfd, 0x92, 0x2 },
        .@"i32x4.relaxed_dot_i8x16_i7x16_add_s" => &.{ 0xfd, 0x93, 0x2 },
        .@"memory.atomic.notify" => &.{ 0xfe,  },
        .@"memory.atomic.wait32" => &.{ 0xfe, 0x1 },
        .@"memory.atomic.wait64" => &.{ 0xfe, 0x2 },
        .@"atomic.fence" => &.{ 0xfe, 0x3 },
        .@"i32.atomic.load" => &.{ 0xfe, 0x10 },
        .@"i64.atomic.load" => &.{ 0xfe, 0x11 },
        .@"i32.atomic.load8_u" => &.{ 0xfe, 0x12 },
        .@"i32.atomic.load16_u" => &.{ 0xfe, 0x13 },
        .@"i64.atomic.load8_u" => &.{ 0xfe, 0x14 },
        .@"i64.atomic.load16_u" => &.{ 0xfe, 0x15 },
        .@"i64.atomic.load32_u" => &.{ 0xfe, 0x16 },
        .@"i32.atomic.store" => &.{ 0xfe, 0x17 },
        .@"i64.atomic.store" => &.{ 0xfe, 0x18 },
        .@"i32.atomic.store8" => &.{ 0xfe, 0x19 },
        .@"i32.atomic.store16" => &.{ 0xfe, 0x1a },
        .@"i64.atomic.store8" => &.{ 0xfe, 0x1b },
        .@"i64.atomic.store16" => &.{ 0xfe, 0x1c },
        .@"i64.atomic.store32" => &.{ 0xfe, 0x1d },
        .@"i32.atomic.rmw.add" => &.{ 0xfe, 0x1e },
        .@"i64.atomic.rmw.add" => &.{ 0xfe, 0x1f },
        .@"i32.atomic.rmw8.add_u" => &.{ 0xfe, 0x20 },
        .@"i32.atomic.rmw16.add_u" => &.{ 0xfe, 0x21 },
        .@"i64.atomic.rmw8.add_u" => &.{ 0xfe, 0x22 },
        .@"i64.atomic.rmw16.add_u" => &.{ 0xfe, 0x23 },
        .@"i64.atomic.rmw32.add_u" => &.{ 0xfe, 0x24 },
        .@"i32.atomic.rmw.sub" => &.{ 0xfe, 0x25 },
        .@"i64.atomic.rmw.sub" => &.{ 0xfe, 0x26 },
        .@"i32.atomic.rmw8.sub_u" => &.{ 0xfe, 0x27 },
        .@"i32.atomic.rmw16.sub_u" => &.{ 0xfe, 0x28 },
        .@"i64.atomic.rmw8.sub_u" => &.{ 0xfe, 0x29 },
        .@"i64.atomic.rmw16.sub_u" => &.{ 0xfe, 0x2a },
        .@"i64.atomic.rmw32.sub_u" => &.{ 0xfe, 0x2b },
        .@"i32.atomic.rmw.and" => &.{ 0xfe, 0x2c },
        .@"i64.atomic.rmw.and" => &.{ 0xfe, 0x2d },
        .@"i32.atomic.rmw8.and_u" => &.{ 0xfe, 0x2e },
        .@"i32.atomic.rmw16.and_u" => &.{ 0xfe, 0x2f },
        .@"i64.atomic.rmw8.and_u" => &.{ 0xfe, 0x30 },
        .@"i64.atomic.rmw16.and_u" => &.{ 0xfe, 0x31 },
        .@"i64.atomic.rmw32.and_u" => &.{ 0xfe, 0x32 },
        .@"i32.atomic.rmw.or" => &.{ 0xfe, 0x33 },
        .@"i64.atomic.rmw.or" => &.{ 0xfe, 0x34 },
        .@"i32.atomic.rmw8.or_u" => &.{ 0xfe, 0x35 },
        .@"i32.atomic.rmw16.or_u" => &.{ 0xfe, 0x36 },
        .@"i64.atomic.rmw8.or_u" => &.{ 0xfe, 0x37 },
        .@"i64.atomic.rmw16.or_u" => &.{ 0xfe, 0x38 },
        .@"i64.atomic.rmw32.or_u" => &.{ 0xfe, 0x39 },
        .@"i32.atomic.rmw.xor" => &.{ 0xfe, 0x3a },
        .@"i64.atomic.rmw.xor" => &.{ 0xfe, 0x3b },
        .@"i32.atomic.rmw8.xor_u" => &.{ 0xfe, 0x3c },
        .@"i32.atomic.rmw16.xor_u" => &.{ 0xfe, 0x3d },
        .@"i64.atomic.rmw8.xor_u" => &.{ 0xfe, 0x3e },
        .@"i64.atomic.rmw16.xor_u" => &.{ 0xfe, 0x3f },
        .@"i64.atomic.rmw32.xor_u" => &.{ 0xfe, 0x40 },
        .@"i32.atomic.rmw.xchg" => &.{ 0xfe, 0x41 },
        .@"i64.atomic.rmw.xchg" => &.{ 0xfe, 0x42 },
        .@"i32.atomic.rmw8.xchg_u" => &.{ 0xfe, 0x43 },
        .@"i32.atomic.rmw16.xchg_u" => &.{ 0xfe, 0x44 },
        .@"i64.atomic.rmw8.xchg_u" => &.{ 0xfe, 0x45 },
        .@"i64.atomic.rmw16.xchg_u" => &.{ 0xfe, 0x46 },
        .@"i64.atomic.rmw32.xchg_u" => &.{ 0xfe, 0x47 },
        .@"i32.atomic.rmw.cmpxchg" => &.{ 0xfe, 0x48 },
        .@"i64.atomic.rmw.cmpxchg" => &.{ 0xfe, 0x49 },
        .@"i32.atomic.rmw8.cmpxchg_u" => &.{ 0xfe, 0x4a },
        .@"i32.atomic.rmw16.cmpxchg_u" => &.{ 0xfe, 0x4b },
        .@"i64.atomic.rmw8.cmpxchg_u" => &.{ 0xfe, 0x4c },
        .@"i64.atomic.rmw16.cmpxchg_u" => &.{ 0xfe, 0x4d },
        .@"i64.atomic.rmw32.cmpxchg_u" => &.{ 0xfe, 0x4e },
    };
}

pub const Inst = enum {
    @"unreachable",
    @"nop",
    @"block",
    @"loop",
    @"if",
    @"else",
    @"try",
    @"catch",
    @"throw",
    @"rethrow",
    @"throw_ref",
    @"end",
    @"br",
    @"br_if",
    @"br_table",
    @"return",
    @"call",
    @"call_indirect",
    @"return_call",
    @"return_call_indirect",
    @"call_ref",
    @"delegate",
    @"catch_all",
    @"drop",
    @"select",
    @"try_table",
    @"local.get",
    @"local.set",
    @"local.tee",
    @"global.get",
    @"global.set",
    @"i32.load",
    @"i64.load",
    @"f32.load",
    @"f64.load",
    @"i32.load8_s",
    @"i32.load8_u",
    @"i32.load16_s",
    @"i32.load16_u",
    @"i64.load8_s",
    @"i64.load8_u",
    @"i64.load16_s",
    @"i64.load16_u",
    @"i64.load32_s",
    @"i64.load32_u",
    @"i32.store",
    @"i64.store",
    @"f32.store",
    @"f64.store",
    @"i32.store8",
    @"i32.store16",
    @"i64.store8",
    @"i64.store16",
    @"i64.store32",
    @"memory.size",
    @"memory.grow",
    @"i32.const",
    @"i64.const",
    @"f32.const",
    @"f64.const",
    @"i32.eqz",
    @"i32.eq",
    @"i32.ne",
    @"i32.lt_s",
    @"i32.lt_u",
    @"i32.gt_s",
    @"i32.gt_u",
    @"i32.le_s",
    @"i32.le_u",
    @"i32.ge_s",
    @"i32.ge_u",
    @"i64.eqz",
    @"i64.eq",
    @"i64.ne",
    @"i64.lt_s",
    @"i64.lt_u",
    @"i64.gt_s",
    @"i64.gt_u",
    @"i64.le_s",
    @"i64.le_u",
    @"i64.ge_s",
    @"i64.ge_u",
    @"f32.eq",
    @"f32.ne",
    @"f32.lt",
    @"f32.gt",
    @"f32.le",
    @"f32.ge",
    @"f64.eq",
    @"f64.ne",
    @"f64.lt",
    @"f64.gt",
    @"f64.le",
    @"f64.ge",
    @"i32.clz",
    @"i32.ctz",
    @"i32.popcnt",
    @"i32.add",
    @"i32.sub",
    @"i32.mul",
    @"i32.div_s",
    @"i32.div_u",
    @"i32.rem_s",
    @"i32.rem_u",
    @"i32.and",
    @"i32.or",
    @"i32.xor",
    @"i32.shl",
    @"i32.shr_s",
    @"i32.shr_u",
    @"i32.rotl",
    @"i32.rotr",
    @"i64.clz",
    @"i64.ctz",
    @"i64.popcnt",
    @"i64.add",
    @"i64.sub",
    @"i64.mul",
    @"i64.div_s",
    @"i64.div_u",
    @"i64.rem_s",
    @"i64.rem_u",
    @"i64.and",
    @"i64.or",
    @"i64.xor",
    @"i64.shl",
    @"i64.shr_s",
    @"i64.shr_u",
    @"i64.rotl",
    @"i64.rotr",
    @"f32.abs",
    @"f32.neg",
    @"f32.ceil",
    @"f32.floor",
    @"f32.trunc",
    @"f32.nearest",
    @"f32.sqrt",
    @"f32.add",
    @"f32.sub",
    @"f32.mul",
    @"f32.div",
    @"f32.min",
    @"f32.max",
    @"f32.copysign",
    @"f64.abs",
    @"f64.neg",
    @"f64.ceil",
    @"f64.floor",
    @"f64.trunc",
    @"f64.nearest",
    @"f64.sqrt",
    @"f64.add",
    @"f64.sub",
    @"f64.mul",
    @"f64.div",
    @"f64.min",
    @"f64.max",
    @"f64.copysign",
    @"i32.wrap_i64",
    @"i32.trunc_f32_s",
    @"i32.trunc_f32_u",
    @"i32.trunc_f64_s",
    @"i32.trunc_f64_u",
    @"i64.extend_i32_s",
    @"i64.extend_i32_u",
    @"i64.trunc_f32_s",
    @"i64.trunc_f32_u",
    @"i64.trunc_f64_s",
    @"i64.trunc_f64_u",
    @"f32.convert_i32_s",
    @"f32.convert_i32_u",
    @"f32.convert_i64_s",
    @"f32.convert_i64_u",
    @"f32.demote_f64",
    @"f64.convert_i32_s",
    @"f64.convert_i32_u",
    @"f64.convert_i64_s",
    @"f64.convert_i64_u",
    @"f64.promote_f32",
    @"i32.reinterpret_f32",
    @"i64.reinterpret_f64",
    @"f32.reinterpret_i32",
    @"f64.reinterpret_i64",
    @"i32.extend8_s",
    @"i32.extend16_s",
    @"i64.extend8_s",
    @"i64.extend16_s",
    @"i64.extend32_s",
    @"alloca",
    @"br_unless",
    @"call_import",
    @"data",
    @"drop_keep",
    @"catch_drop",
    @"adjust_frame_for_return_call",
    @"global.get.ref",
    @"local.get.ref",
    @"mark_ref",
    @"i32.trunc_sat_f32_s",
    @"i32.trunc_sat_f32_u",
    @"i32.trunc_sat_f64_s",
    @"i32.trunc_sat_f64_u",
    @"i64.trunc_sat_f32_s",
    @"i64.trunc_sat_f32_u",
    @"i64.trunc_sat_f64_s",
    @"i64.trunc_sat_f64_u",
    @"memory.init",
    @"data.drop",
    @"memory.copy",
    @"memory.fill",
    @"table.init",
    @"elem.drop",
    @"table.copy",
    @"table.get",
    @"table.set",
    @"table.grow",
    @"table.size",
    @"table.fill",
    @"ref.null",
    @"ref.is_null",
    @"ref.func",
    @"v128.load",
    @"v128.load8x8_s",
    @"v128.load8x8_u",
    @"v128.load16x4_s",
    @"v128.load16x4_u",
    @"v128.load32x2_s",
    @"v128.load32x2_u",
    @"v128.load8_splat",
    @"v128.load16_splat",
    @"v128.load32_splat",
    @"v128.load64_splat",
    @"v128.store",
    @"v128.const",
    @"i8x16.shuffle",
    @"i8x16.swizzle",
    @"i8x16.splat",
    @"i16x8.splat",
    @"i32x4.splat",
    @"i64x2.splat",
    @"f32x4.splat",
    @"f64x2.splat",
    @"i8x16.extract_lane_s",
    @"i8x16.extract_lane_u",
    @"i8x16.replace_lane",
    @"i16x8.extract_lane_s",
    @"i16x8.extract_lane_u",
    @"i16x8.replace_lane",
    @"i32x4.extract_lane",
    @"i32x4.replace_lane",
    @"i64x2.extract_lane",
    @"i64x2.replace_lane",
    @"f32x4.extract_lane",
    @"f32x4.replace_lane",
    @"f64x2.extract_lane",
    @"f64x2.replace_lane",
    @"i8x16.eq",
    @"i8x16.ne",
    @"i8x16.lt_s",
    @"i8x16.lt_u",
    @"i8x16.gt_s",
    @"i8x16.gt_u",
    @"i8x16.le_s",
    @"i8x16.le_u",
    @"i8x16.ge_s",
    @"i8x16.ge_u",
    @"i16x8.eq",
    @"i16x8.ne",
    @"i16x8.lt_s",
    @"i16x8.lt_u",
    @"i16x8.gt_s",
    @"i16x8.gt_u",
    @"i16x8.le_s",
    @"i16x8.le_u",
    @"i16x8.ge_s",
    @"i16x8.ge_u",
    @"i32x4.eq",
    @"i32x4.ne",
    @"i32x4.lt_s",
    @"i32x4.lt_u",
    @"i32x4.gt_s",
    @"i32x4.gt_u",
    @"i32x4.le_s",
    @"i32x4.le_u",
    @"i32x4.ge_s",
    @"i32x4.ge_u",
    @"f32x4.eq",
    @"f32x4.ne",
    @"f32x4.lt",
    @"f32x4.gt",
    @"f32x4.le",
    @"f32x4.ge",
    @"f64x2.eq",
    @"f64x2.ne",
    @"f64x2.lt",
    @"f64x2.gt",
    @"f64x2.le",
    @"f64x2.ge",
    @"v128.not",
    @"v128.and",
    @"v128.andnot",
    @"v128.or",
    @"v128.xor",
    @"v128.bitselect",
    @"v128.any_true",
    @"v128.load8_lane",
    @"v128.load16_lane",
    @"v128.load32_lane",
    @"v128.load64_lane",
    @"v128.store8_lane",
    @"v128.store16_lane",
    @"v128.store32_lane",
    @"v128.store64_lane",
    @"v128.load32_zero",
    @"v128.load64_zero",
    @"f32x4.demote_f64x2_zero",
    @"f64x2.promote_low_f32x4",
    @"i8x16.abs",
    @"i8x16.neg",
    @"i8x16.popcnt",
    @"i8x16.all_true",
    @"i8x16.bitmask",
    @"i8x16.narrow_i16x8_s",
    @"i8x16.narrow_i16x8_u",
    @"i8x16.shl",
    @"i8x16.shr_s",
    @"i8x16.shr_u",
    @"i8x16.add",
    @"i8x16.add_sat_s",
    @"i8x16.add_sat_u",
    @"i8x16.sub",
    @"i8x16.sub_sat_s",
    @"i8x16.sub_sat_u",
    @"i8x16.min_s",
    @"i8x16.min_u",
    @"i8x16.max_s",
    @"i8x16.max_u",
    @"i8x16.avgr_u",
    @"i16x8.extadd_pairwise_i8x16_s",
    @"i16x8.extadd_pairwise_i8x16_u",
    @"i32x4.extadd_pairwise_i16x8_s",
    @"i32x4.extadd_pairwise_i16x8_u",
    @"i16x8.abs",
    @"i16x8.neg",
    @"i16x8.q15mulr_sat_s",
    @"i16x8.all_true",
    @"i16x8.bitmask",
    @"i16x8.narrow_i32x4_s",
    @"i16x8.narrow_i32x4_u",
    @"i16x8.extend_low_i8x16_s",
    @"i16x8.extend_high_i8x16_s",
    @"i16x8.extend_low_i8x16_u",
    @"i16x8.extend_high_i8x16_u",
    @"i16x8.shl",
    @"i16x8.shr_s",
    @"i16x8.shr_u",
    @"i16x8.add",
    @"i16x8.add_sat_s",
    @"i16x8.add_sat_u",
    @"i16x8.sub",
    @"i16x8.sub_sat_s",
    @"i16x8.sub_sat_u",
    @"i16x8.mul",
    @"i16x8.min_s",
    @"i16x8.min_u",
    @"i16x8.max_s",
    @"i16x8.max_u",
    @"i16x8.avgr_u",
    @"i16x8.extmul_low_i8x16_s",
    @"i16x8.extmul_high_i8x16_s",
    @"i16x8.extmul_low_i8x16_u",
    @"i16x8.extmul_high_i8x16_u",
    @"i32x4.abs",
    @"i32x4.neg",
    @"i32x4.all_true",
    @"i32x4.bitmask",
    @"i32x4.extend_low_i16x8_s",
    @"i32x4.extend_high_i16x8_s",
    @"i32x4.extend_low_i16x8_u",
    @"i32x4.extend_high_i16x8_u",
    @"i32x4.shl",
    @"i32x4.shr_s",
    @"i32x4.shr_u",
    @"i32x4.add",
    @"i32x4.sub",
    @"i32x4.mul",
    @"i32x4.min_s",
    @"i32x4.min_u",
    @"i32x4.max_s",
    @"i32x4.max_u",
    @"i32x4.dot_i16x8_s",
    @"i32x4.extmul_low_i16x8_s",
    @"i32x4.extmul_high_i16x8_s",
    @"i32x4.extmul_low_i16x8_u",
    @"i32x4.extmul_high_i16x8_u",
    @"i64x2.abs",
    @"i64x2.neg",
    @"i64x2.all_true",
    @"i64x2.bitmask",
    @"i64x2.extend_low_i32x4_s",
    @"i64x2.extend_high_i32x4_s",
    @"i64x2.extend_low_i32x4_u",
    @"i64x2.extend_high_i32x4_u",
    @"i64x2.shl",
    @"i64x2.shr_s",
    @"i64x2.shr_u",
    @"i64x2.add",
    @"i64x2.sub",
    @"i64x2.mul",
    @"i64x2.eq",
    @"i64x2.ne",
    @"i64x2.lt_s",
    @"i64x2.gt_s",
    @"i64x2.le_s",
    @"i64x2.ge_s",
    @"i64x2.extmul_low_i32x4_s",
    @"i64x2.extmul_high_i32x4_s",
    @"i64x2.extmul_low_i32x4_u",
    @"i64x2.extmul_high_i32x4_u",
    @"f32x4.ceil",
    @"f32x4.floor",
    @"f32x4.trunc",
    @"f32x4.nearest",
    @"f64x2.ceil",
    @"f64x2.floor",
    @"f64x2.trunc",
    @"f64x2.nearest",
    @"f32x4.abs",
    @"f32x4.neg",
    @"f32x4.sqrt",
    @"f32x4.add",
    @"f32x4.sub",
    @"f32x4.mul",
    @"f32x4.div",
    @"f32x4.min",
    @"f32x4.max",
    @"f32x4.pmin",
    @"f32x4.pmax",
    @"f64x2.abs",
    @"f64x2.neg",
    @"f64x2.sqrt",
    @"f64x2.add",
    @"f64x2.sub",
    @"f64x2.mul",
    @"f64x2.div",
    @"f64x2.min",
    @"f64x2.max",
    @"f64x2.pmin",
    @"f64x2.pmax",
    @"i32x4.trunc_sat_f32x4_s",
    @"i32x4.trunc_sat_f32x4_u",
    @"f32x4.convert_i32x4_s",
    @"f32x4.convert_i32x4_u",
    @"i32x4.trunc_sat_f64x2_s_zero",
    @"i32x4.trunc_sat_f64x2_u_zero",
    @"f64x2.convert_low_i32x4_s",
    @"f64x2.convert_low_i32x4_u",
    @"i8x16.relaxed_swizzle",
    @"i32x4.relaxed_trunc_f32x4_s",
    @"i32x4.relaxed_trunc_f32x4_u",
    @"i32x4.relaxed_trunc_f64x2_s_zero",
    @"i32x4.relaxed_trunc_f64x2_u_zero",
    @"f32x4.relaxed_madd",
    @"f32x4.relaxed_nmadd",
    @"f64x2.relaxed_madd",
    @"f64x2.relaxed_nmadd",
    @"i8x16.relaxed_laneselect",
    @"i16x8.relaxed_laneselect",
    @"i32x4.relaxed_laneselect",
    @"i64x2.relaxed_laneselect",
    @"f32x4.relaxed_min",
    @"f32x4.relaxed_max",
    @"f64x2.relaxed_min",
    @"f64x2.relaxed_max",
    @"i16x8.relaxed_q15mulr_s",
    @"i16x8.relaxed_dot_i8x16_i7x16_s",
    @"i32x4.relaxed_dot_i8x16_i7x16_add_s",
    @"memory.atomic.notify",
    @"memory.atomic.wait32",
    @"memory.atomic.wait64",
    @"atomic.fence",
    @"i32.atomic.load",
    @"i64.atomic.load",
    @"i32.atomic.load8_u",
    @"i32.atomic.load16_u",
    @"i64.atomic.load8_u",
    @"i64.atomic.load16_u",
    @"i64.atomic.load32_u",
    @"i32.atomic.store",
    @"i64.atomic.store",
    @"i32.atomic.store8",
    @"i32.atomic.store16",
    @"i64.atomic.store8",
    @"i64.atomic.store16",
    @"i64.atomic.store32",
    @"i32.atomic.rmw.add",
    @"i64.atomic.rmw.add",
    @"i32.atomic.rmw8.add_u",
    @"i32.atomic.rmw16.add_u",
    @"i64.atomic.rmw8.add_u",
    @"i64.atomic.rmw16.add_u",
    @"i64.atomic.rmw32.add_u",
    @"i32.atomic.rmw.sub",
    @"i64.atomic.rmw.sub",
    @"i32.atomic.rmw8.sub_u",
    @"i32.atomic.rmw16.sub_u",
    @"i64.atomic.rmw8.sub_u",
    @"i64.atomic.rmw16.sub_u",
    @"i64.atomic.rmw32.sub_u",
    @"i32.atomic.rmw.and",
    @"i64.atomic.rmw.and",
    @"i32.atomic.rmw8.and_u",
    @"i32.atomic.rmw16.and_u",
    @"i64.atomic.rmw8.and_u",
    @"i64.atomic.rmw16.and_u",
    @"i64.atomic.rmw32.and_u",
    @"i32.atomic.rmw.or",
    @"i64.atomic.rmw.or",
    @"i32.atomic.rmw8.or_u",
    @"i32.atomic.rmw16.or_u",
    @"i64.atomic.rmw8.or_u",
    @"i64.atomic.rmw16.or_u",
    @"i64.atomic.rmw32.or_u",
    @"i32.atomic.rmw.xor",
    @"i64.atomic.rmw.xor",
    @"i32.atomic.rmw8.xor_u",
    @"i32.atomic.rmw16.xor_u",
    @"i64.atomic.rmw8.xor_u",
    @"i64.atomic.rmw16.xor_u",
    @"i64.atomic.rmw32.xor_u",
    @"i32.atomic.rmw.xchg",
    @"i64.atomic.rmw.xchg",
    @"i32.atomic.rmw8.xchg_u",
    @"i32.atomic.rmw16.xchg_u",
    @"i64.atomic.rmw8.xchg_u",
    @"i64.atomic.rmw16.xchg_u",
    @"i64.atomic.rmw32.xchg_u",
    @"i32.atomic.rmw.cmpxchg",
    @"i64.atomic.rmw.cmpxchg",
    @"i32.atomic.rmw8.cmpxchg_u",
    @"i32.atomic.rmw16.cmpxchg_u",
    @"i64.atomic.rmw8.cmpxchg_u",
    @"i64.atomic.rmw16.cmpxchg_u",
    @"i64.atomic.rmw32.cmpxchg_u",
};

const std = @import("std");

pub fn getFile(uri: std.Uri) !std.http.Client.Request {
    const allocator = std.heap.page_allocator;
    var client = std.http.Client{ .allocator = allocator };
    var server_header_buffer: [2048]u8 = undefined;
    const options = std.http.Client.RequestOptions{ .server_header_buffer = &server_header_buffer };
    var request = try client.open(.GET, uri, options);
    try request.send();
    try request.finish();
    try request.wait();
    return request;
}

pub fn main() !void {
    var buffer: [0xFFFF]u8 = undefined;
    var start: usize = undefined;
    var bytes: usize = undefined;
    {
        const file = try std.fs.cwd().openFile("inst.zig", .{ .mode = .read_write });
        const file_reader = file.reader();

        bytes = try file_reader.readAll(&buffer);
        start = std.mem.indexOf(u8, &buffer, "const std = @import(\"std\");").?;
        file.close();
    }
    const file = try std.fs.cwd().createFile("inst.zig", .{ .truncate = true });

    var req = try getFile(try std.Uri.parse("https://raw.githubusercontent.com/Webassembly/wabt/main/include/wabt/opcode.def"));
    defer req.deinit();
    var buf: [0xFF]u8 = undefined;
    const reader = req.reader();

    var enum_buffer = std.ArrayList(u8).init(std.heap.page_allocator);
    try file.writeAll("pub fn instToBytes(inst: Inst) []const u8 {\n    return switch (inst) {\n");
    try enum_buffer.appendSlice("pub const Inst = enum {\n");
    while (if (reader.readUntilDelimiter(&buf, '\n')) |slice| slice else |_| null) |slice| {
        if (slice.len > 0 and slice[0] == 'W') {
            var args = std.mem.splitScalar(u8, slice, ',');
            for (0..5) |_| {
                _ = args.next();
            }
            const prefix_str = std.mem.trim(u8, args.next().?, " ");
            const opcode_str = std.mem.trim(u8, args.next().?, " ");
            const prefix = if (prefix_str.len > 2) try std.fmt.parseInt(u8, prefix_str[2..], 16) else 0;
            const opcode = try std.fmt.parseInt(u32, opcode_str[2..], 16);
            _ = args.next();
            const identifier = std.mem.trim(u8, args.next().?, " ");

            if (std.mem.eql(u8, identifier, "\"select\"") and opcode == 0x1b) {
                continue;
            }

            try file.writer().print("        .@{s} => &.{{ ", .{identifier});
            if (prefix == 0) {
                try file.writer().print("0x{x}", .{opcode});
            } else {
                try file.writer().print("0x{x}, ", .{prefix});
                var lebBuffer = try std.BoundedArray(u8, 4).init(0);
                try std.leb.writeUleb128(lebBuffer.writer(), opcode);
                for (lebBuffer.slice(), 0..) |byte, i| {
                    if (byte > 0) {
                        if (i > 0) {
                            try file.writeAll(", ");
                        }
                        try file.writer().print("0x{x}", .{byte});
                    }
                }
            }
            try file.writer().writeAll(" },\n");

            try enum_buffer.writer().print("    @{s},\n", .{identifier});
        }
    }
    try file.writeAll("    };\n}\n\n");
    try enum_buffer.appendSlice("};\n\n");

    try file.writeAll(enum_buffer.items);

    try file.writeAll(buffer[start..bytes]);
    file.close();
}

pub const ParsingStrategy = enum {
    byte,
    v128,
    memarg,
    i32,
    i64,
    f32,
    f64,
    memoryIndex,
    dataIndex,
    elemIndex,
    tableIndex,
    globalIndex,
    localIndex,
    labelIndex,
    br_table,
    paramType,
    resultType,
    funcIndex,
    reftype,
};

pub fn instParsingStrategy(inst: Inst) []const ParsingStrategy {
    return switch (inst) {
        .@"call_indirect" => &.{ .funcIndex, .paramType, .resultType },
        .br_table => &.{.br_table},
        .br_if, .br => &.{.labelIndex},
        .@"ref.null" => &.{.reftype},
        .call, .@"ref.func" => &.{.funcIndex},
        .@"if", .block, .loop, .select => &.{.resultType},
        .@"local.get", .@"local.set", .@"local.tee" => &.{.localIndex},
        .@"global.get", .@"global.set" => &.{.globalIndex},
        .@"table.get", .@"table.set", .@"table.grow", .@"table.size", .@"table.fill" => &.{.tableIndex},
        .@"elem.drop" => &.{ .elemIndex },
        .@"table.copy" => &.{ .tableIndex, .tableIndex },
        .@"table.init" => &.{ .elemIndex, .tableIndex },
        .@"data.drop" => &.{.dataIndex},
        .@"memory.init" => &.{ .dataIndex, .memoryIndex },
        .@"memory.size", .@"memory.grow", .@"memory.copy", .@"memory.fill" => &.{.memoryIndex},
        .@"i32.const" => &.{.i32},
        .@"i64.const" => &.{.i64},
        .@"f32.const" => &.{.f32},
        .@"f64.const" => &.{.f64},
        .@"i32.load", .@"i64.load", .@"f32.load", .@"f64.load", .@"i32.load8_s", .@"i32.load8_u", .@"i32.load16_s", .@"i32.load16_u", .@"i64.load8_s", .@"i64.load8_u", .@"i64.load16_s", .@"i64.load16_u", .@"i64.load32_s", .@"i64.load32_u", .@"i32.store", .@"i64.store", .@"f32.store", .@"f64.store", .@"i32.store8", .@"i32.store16", .@"i64.store8", .@"i64.store16", .@"i64.store32", .@"v128.load", .@"v128.load8x8_s", .@"v128.load8x8_u", .@"v128.load16x4_s", .@"v128.load16x4_u", .@"v128.load32x2_s", .@"v128.load32x2_u", .@"v128.load8_splat", .@"v128.load16_splat", .@"v128.load32_splat", .@"v128.load64_splat", .@"v128.load32_zero", .@"v128.load64_zero", .@"v128.store" => &.{.memarg},
        .@"v128.load8_lane", .@"v128.load16_lane", .@"v128.load32_lane", .@"v128.load64_lane", .@"v128.store8_lane", .@"v128.store16_lane", .@"v128.store32_lane", .@"v128.store64_lane" => &.{ .byte, .memarg },
        .@"v128.const" => &.{.v128},
        .@"i8x16.shuffle" => &(.{.byte} ** 16),
        .@"i8x16.extract_lane_s", .@"i8x16.extract_lane_u", .@"i8x16.replace_lane", .@"i16x8.extract_lane_s", .@"i16x8.extract_lane_u", .@"i16x8.replace_lane", .@"i32x4.extract_lane", .@"i32x4.replace_lane", .@"i64x2.extract_lane", .@"i64x2.replace_lane", .@"f32x4.extract_lane", .@"f32x4.replace_lane", .@"f64x2.extract_lane", .@"f64x2.replace_lane" => &.{.byte},
        else => &.{},
    };
}
