Type literals are just expressions

choice Expression
  type

Four types of literals
  number 1.0 1.5 etc...
  boolean true, false
  list 1, 2, 3, 4
  type Number, Boolean, List(_), etc...

Set(Integer(90)) numbers = new_set(
  1
  2
  3
  4
)

add(numbers, 5)
debug(has(numbers, 2))

Integer(90) x = 5
x.set(10)
multiply(x, 10)
divide(x, 10)
exponentiate(x, 5)
subtract(x, 2)
add(x, 2)
assert(is_equal(x, exponentiate(10, 5)))

Integer(90) x = 5
x = 10
x *= 10
x /= 10
x ^= 5
x -= 2
x += 2
assert(x = 10 ^ 5)

// One way to write something (No specific shorthands, etc)
// No special cases
// Built in itself

bundle Set(Type ItemType)
  List(ItemType) items

Set(ItemType) new_set(List(ItemType) items)
  return Set(ItemType)
    items = items

bundle Integer(Integer size)
  List(Integer) list
